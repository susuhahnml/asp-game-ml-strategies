[
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-rule-S.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-S.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-rule-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 64,
                "total_reward": -172,
                "average_response": 0.01,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-S.lp",
                "wins": 236,
                "total_reward": 172,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-rule-M.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-M.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-rule-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 45,
                "total_reward": -210,
                "average_response": 0.009,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-M.lp",
                "wins": 255,
                "total_reward": 210,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-rule-L.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-L.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-rule-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 24,
                "total_reward": -252,
                "average_response": 0.01,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-L.lp",
                "wins": 276,
                "total_reward": 252,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-tree-S.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-S.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-tree-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 151,
                "total_reward": 2,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-tree-S.json",
                "wins": 149,
                "total_reward": -2,
                "average_response": 0.039,
                "std": 0.034
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-tree-M.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-M.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-tree-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 100,
                "total_reward": -100,
                "average_response": 0.007,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-tree-M.json",
                "wins": 200,
                "total_reward": 100,
                "average_response": 0.09,
                "std": 0.044
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-tree-L.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-L.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-tree-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 64,
                "total_reward": -172,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-tree-L.json",
                "wins": 236,
                "total_reward": 172,
                "average_response": 0.121,
                "std": 0.048
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_minmax-S.json_in_full.json --play-symmetry --a=random --b=minmax-S.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_minmax-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 138,
                "total_reward": -24,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "minmax-S.json",
                "wins": 162,
                "total_reward": 24,
                "average_response": 0.042,
                "std": 0.041
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_minmax-M.json_in_full.json --play-symmetry --a=random --b=minmax-M.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_minmax-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 90,
                "total_reward": -120,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "minmax-M.json",
                "wins": 210,
                "total_reward": 120,
                "average_response": 0.11,
                "std": 0.047
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_minmax-L.json_in_full.json --play-symmetry --a=random --b=minmax-L.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_minmax-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 63,
                "total_reward": -174,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "minmax-L.json",
                "wins": 237,
                "total_reward": 174,
                "average_response": 0.131,
                "std": 0.047
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_ilasp-S.lp_in_full.json --play-symmetry --a=random --b=ilasp-S.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_ilasp-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 109,
                "total_reward": -82,
                "average_response": 0.01,
                "std": 0.003
            },
            "b": {
                "style_name": "ilasp-S.lp",
                "wins": 191,
                "total_reward": 82,
                "average_response": 0.004,
                "std": 0.002
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_ilasp-M.lp_in_full.json --play-symmetry --a=random --b=ilasp-M.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_ilasp-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 1,
                "total_reward": -298,
                "average_response": 0.008,
                "std": 0.001
            },
            "b": {
                "style_name": "ilasp-M.lp",
                "wins": 299,
                "total_reward": 298,
                "average_response": 0.003,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=nim --init=initial_full.lp --out=VS_ilasp-L.lp_in_full.json --play-symmetry --a=random --b=ilasp-L.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_ilasp-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 0,
                "total_reward": -300,
                "average_response": 0.008,
                "std": 0.002
            },
            "b": {
                "style_name": "ilasp-L.lp",
                "wins": 300,
                "total_reward": 300,
                "average_response": 0.003,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-rule-S.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-S.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-rule-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 116,
                "total_reward": -19,
                "average_response": 0.011,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-S.lp",
                "wins": 135,
                "total_reward": 19,
                "average_response": 0.007,
                "std": 0.002
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-rule-M.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-M.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-rule-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 131,
                "total_reward": -2,
                "average_response": 0.009,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-M.lp",
                "wins": 133,
                "total_reward": 2,
                "average_response": 0.005,
                "std": 0.004
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-rule-L.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-L.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-rule-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 78,
                "total_reward": -118,
                "average_response": 0.012,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-L.lp",
                "wins": 196,
                "total_reward": 118,
                "average_response": 0.007,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-tree-S.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-S.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-tree-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 141,
                "total_reward": 17,
                "average_response": 0.008,
                "std": 0.003
            },
            "b": {
                "style_name": "pruned_minmax-tree-S.json",
                "wins": 124,
                "total_reward": -17,
                "average_response": 0.023,
                "std": 0.006
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-tree-M.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-M.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-tree-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 118,
                "total_reward": -20,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-tree-M.json",
                "wins": 138,
                "total_reward": 20,
                "average_response": 0.023,
                "std": 0.019
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-tree-L.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-L.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_pruned_minmax-tree-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 111,
                "total_reward": -45,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-tree-L.json",
                "wins": 156,
                "total_reward": 45,
                "average_response": 0.07,
                "std": 0.087
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_minmax-S.json_in_full.json --play-symmetry --a=random --b=minmax-S.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_minmax-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 127,
                "total_reward": -11,
                "average_response": 0.007,
                "std": 0.002
            },
            "b": {
                "style_name": "minmax-S.json",
                "wins": 138,
                "total_reward": 11,
                "average_response": 0.019,
                "std": 0.004
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_minmax-M.json_in_full.json --play-symmetry --a=random --b=minmax-M.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_minmax-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 125,
                "total_reward": -3,
                "average_response": 0.007,
                "std": 0.002
            },
            "b": {
                "style_name": "minmax-M.json",
                "wins": 128,
                "total_reward": 3,
                "average_response": 0.035,
                "std": 0.044
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_minmax-L.json_in_full.json --play-symmetry --a=random --b=minmax-L.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_minmax-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 78,
                "total_reward": -103,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "minmax-L.json",
                "wins": 181,
                "total_reward": 103,
                "average_response": 0.091,
                "std": 0.091
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_ilasp-S.lp_in_full.json --play-symmetry --a=random --b=ilasp-S.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_ilasp-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 112,
                "total_reward": -49,
                "average_response": 0.007,
                "std": 0.001
            },
            "b": {
                "style_name": "ilasp-S.lp",
                "wins": 161,
                "total_reward": 49,
                "average_response": 0.003,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=150 --game-name=ttt --init=initial_full.lp --out=VS_ilasp-M.lp_in_full.json --play-symmetry --a=random --b=ilasp-M.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 150,
            "benchmark_output_file": "VS_ilasp-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 68,
                "total_reward": -160,
                "average_response": 0.008,
                "std": 0.002
            },
            "b": {
                "style_name": "ilasp-M.lp",
                "wins": 228,
                "total_reward": 160,
                "average_response": 0.003,
                "std": 0.001
            }
        }
    }
]