[
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-rule-S.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-S.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-rule-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 7,
                "total_reward": -186,
                "average_response": 0.011,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-S.lp",
                "wins": 193,
                "total_reward": 186,
                "average_response": 1281.225,
                "std": 301.864
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-rule-M.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-M.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-rule-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 8,
                "total_reward": -184,
                "average_response": 0.011,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-M.lp",
                "wins": 192,
                "total_reward": 184,
                "average_response": 1200.841,
                "std": 334.095
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-rule-L.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-L.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-rule-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 2,
                "total_reward": -196,
                "average_response": 0.012,
                "std": 0.001
            },
            "b": {
                "style_name": "pruned_minmax-rule-L.lp",
                "wins": 198,
                "total_reward": 196,
                "average_response": 1111.491,
                "std": 280.838
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-tree-S.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-S.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-tree-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 86,
                "total_reward": -28,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "pruned_minmax-tree-S.json",
                "wins": 114,
                "total_reward": 28,
                "average_response": 0.066,
                "std": 0.051
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-tree-M.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-M.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-tree-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 67,
                "total_reward": -66,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "pruned_minmax-tree-M.json",
                "wins": 133,
                "total_reward": 66,
                "average_response": 0.138,
                "std": 0.058
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_pruned_minmax-tree-L.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-L.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-tree-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 22,
                "total_reward": -156,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "pruned_minmax-tree-L.json",
                "wins": 178,
                "total_reward": 156,
                "average_response": 0.243,
                "std": 0.073
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_minmax-S.json_in_full.json --play-symmetry --a=random --b=minmax-S.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_minmax-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 85,
                "total_reward": -30,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "minmax-S.json",
                "wins": 115,
                "total_reward": 30,
                "average_response": 0.065,
                "std": 0.051
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_minmax-M.json_in_full.json --play-symmetry --a=random --b=minmax-M.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_minmax-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 47,
                "total_reward": -106,
                "average_response": 0.014,
                "std": 0.004
            },
            "b": {
                "style_name": "minmax-M.json",
                "wins": 153,
                "total_reward": 106,
                "average_response": 0.193,
                "std": 0.069
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_minmax-L.json_in_full.json --play-symmetry --a=random --b=minmax-L.json",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_minmax-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 19,
                "total_reward": -162,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "minmax-L.json",
                "wins": 181,
                "total_reward": 162,
                "average_response": 0.24,
                "std": 0.077
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_ilasp-S.lp_in_full.json --play-symmetry --a=random --b=ilasp-S.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_ilasp-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 68,
                "total_reward": -64,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "ilasp-S.lp",
                "wins": 132,
                "total_reward": 64,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_ilasp-M.lp_in_full.json --play-symmetry --a=random --b=ilasp-M.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_ilasp-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 1,
                "total_reward": -198,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "ilasp-M.lp",
                "wins": 199,
                "total_reward": 198,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=nim --init=initial_full.lp --out=VS_ilasp-L.lp_in_full.json --play-symmetry --a=random --b=ilasp-L.lp",
        "args": {
            "log": "error",
            "game_name": "nim",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_ilasp-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).has(1,1).has(2,3).has(3,5).has(4,7)",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 3,
                "total_reward": -194,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "ilasp-L.lp",
                "wins": 197,
                "total_reward": 194,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-rule-S.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-S.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-rule-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 46,
                "total_reward": -81,
                "average_response": 0.012,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-rule-S.lp",
                "wins": 127,
                "total_reward": 81,
                "average_response": 2674.613,
                "std": 321.764
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-rule-M.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-M.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-rule-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 46,
                "total_reward": -93,
                "average_response": 0.011,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-rule-M.lp",
                "wins": 139,
                "total_reward": 93,
                "average_response": 2651.778,
                "std": 346.107
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-rule-L.lp_in_full.json --play-symmetry --a=random --b=pruned_minmax-rule-L.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-rule-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-rule-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 57,
                "total_reward": -59,
                "average_response": 0.011,
                "std": 0.002
            },
            "b": {
                "style_name": "pruned_minmax-rule-L.lp",
                "wins": 116,
                "total_reward": 59,
                "average_response": 3155.163,
                "std": 235.318
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-tree-S.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-S.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-tree-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 89,
                "total_reward": 7,
                "average_response": 0.013,
                "std": 0.005
            },
            "b": {
                "style_name": "pruned_minmax-tree-S.json",
                "wins": 82,
                "total_reward": -7,
                "average_response": 0.036,
                "std": 0.013
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-tree-M.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-M.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-tree-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 78,
                "total_reward": -20,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "pruned_minmax-tree-M.json",
                "wins": 98,
                "total_reward": 20,
                "average_response": 0.04,
                "std": 0.019
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_pruned_minmax-tree-L.json_in_full.json --play-symmetry --a=random --b=pruned_minmax-tree-L.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_pruned_minmax-tree-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "pruned_minmax-tree-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 67,
                "total_reward": -40,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "pruned_minmax-tree-L.json",
                "wins": 107,
                "total_reward": 40,
                "average_response": 0.095,
                "std": 0.112
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_minmax-S.json_in_full.json --play-symmetry --a=random --b=minmax-S.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_minmax-S.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-S.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 89,
                "total_reward": -1,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "minmax-S.json",
                "wins": 90,
                "total_reward": 1,
                "average_response": 0.038,
                "std": 0.015
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_minmax-M.json_in_full.json --play-symmetry --a=random --b=minmax-M.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_minmax-M.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-M.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 88,
                "total_reward": -3,
                "average_response": 0.013,
                "std": 0.003
            },
            "b": {
                "style_name": "minmax-M.json",
                "wins": 91,
                "total_reward": 3,
                "average_response": 0.052,
                "std": 0.051
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_minmax-L.json_in_full.json --play-symmetry --a=random --b=minmax-L.json",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_minmax-L.json_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "minmax-L.json",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 57,
                "total_reward": -64,
                "average_response": 0.013,
                "std": 0.004
            },
            "b": {
                "style_name": "minmax-L.json",
                "wins": 121,
                "total_reward": 64,
                "average_response": 0.134,
                "std": 0.141
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_ilasp-S.lp_in_full.json --play-symmetry --a=random --b=ilasp-S.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_ilasp-S.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-S.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 37,
                "total_reward": -114,
                "average_response": 0.014,
                "std": 0.004
            },
            "b": {
                "style_name": "ilasp-S.lp",
                "wins": 151,
                "total_reward": 114,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_ilasp-M.lp_in_full.json --play-symmetry --a=random --b=ilasp-M.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_ilasp-M.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-M.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 47,
                "total_reward": -103,
                "average_response": 0.014,
                "std": 0.003
            },
            "b": {
                "style_name": "ilasp-M.lp",
                "wins": 150,
                "total_reward": 103,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    },
    {
        "command": "vs --log=error --n=100 --game-name=ttt --init=initial_full.lp --out=VS_ilasp-L.lp_in_full.json --play-symmetry --a=random --b=ilasp-L.lp",
        "args": {
            "log": "error",
            "game_name": "ttt",
            "const": null,
            "random_initial_state_seed": null,
            "initial": "initial_full.lp",
            "num_repetitions": 100,
            "benchmark_output_file": "VS_ilasp-L.lp_in_full.json",
            "selected_approach": "vs",
            "pA_style": "random",
            "pB_style": "ilasp-L.lp",
            "play_symmetry": true
        },
        "initial_state": "control(a).free(cell(1,1)).free(cell(1,2)).free(cell(1,3)).free(cell(2,1)).free(cell(2,2)).free(cell(2,3)).free(cell(3,1)).free(cell(3,2)).free(cell(3,3))",
        "results": {
            "a": {
                "style_name": "random",
                "wins": 47,
                "total_reward": -103,
                "average_response": 0.014,
                "std": 0.003
            },
            "b": {
                "style_name": "ilasp-L.lp",
                "wins": 150,
                "total_reward": 103,
                "average_response": 0.005,
                "std": 0.001
            }
        }
    }
]